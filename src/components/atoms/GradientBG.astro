<script>
  document.addEventListener("astro:page-load", () => {
    const interBubble = document.querySelector<HTMLDivElement>(".interactive")!;
    let curX = 0;
    let curY = 0;
    let tgX = 0;
    let tgY = 0;

    function move() {
      curX += (tgX - curX) * 0.1;
      curY += (tgY - curY) * 0.1;
      interBubble.style.transform = `translate(${curX}px, ${curY}px)`;
      requestAnimationFrame(move);
    }

    window.addEventListener("mousemove", (event) => {
      tgX = event.clientX;
      tgY = event.clientY;
    });

    move();
  });
</script>

<div class="gradient-bg sticky left-0 top-0 z-0 opacity-60" transition:persist>
  <div class="gradients-container">
    <figure class="g1"></figure>
    <figure class="g2"></figure>
    <figure class="g3"></figure>
    <figure class="g4"></figure>
    <figure class="g5"></figure>
    <figure class="interactive"></figure>
  </div>
</div>

<style>
  :root {
    --color1: 18, 113, 255;
    --color2: 221, 74, 255;
    --color3: 116, 92, 221;
    --color4: 200, 50, 125;
    --color5: 0, 169, 225;
    --color-interactive: 140, 100, 255;
    --circle-size: 60%;
    --blending: hard-light;
  }

  .gradient-bg {
    width: 100vw;
    height: 100vh;
    overflow: hidden;
    top: 0;
    left: 0;
    background-color: #20204e;
  }

  .gradients-container {
    filter: url("/images/gradients.svg#goo") blur(30px);
    width: 100%;
    height: 100%;
    position: relative;
    transition: height 0.5s;
    opacity: 70%;
    will-change: transform, filter;
    transform: translate3D(0, 0, 0);
  }

  html[data-is-top="false"] .gradients-container {
    mask-image: linear-gradient(to bottom, black 90%, transparent 100%);
  }

  html[data-is-top="true"] .gradients-container {
    height: 110%;
  }

  .g1,
  .g2,
  .g3,
  .g4,
  .g5 {
    position: absolute;
    width: var(--circle-size);
    height: var(--circle-size);
    background: radial-gradient(
      circle,
      rgba(var(--color1), 0.8) 0%,
      rgba(var(--color1), 0) 50%
    );
    mix-blend-mode: var(--blending);
    animation: moveInCircle 60s infinite;
    transform-origin: center;
    blur: 40px;
  }

  /* Light blue blob */
  .g1 {
    top: 25%;
    left: 15%;
    transform-origin: center;
    animation: moveInCircle 90s ease infinite;
  }

  /* Pink blob */
  .g2 {
    top: 15%;
    left: 35%;
    animation: moveVertical 90s infinite;
    background: radial-gradient(
      circle,
      rgba(var(--color2), 0.8) 0%,
      rgba(var(--color2), 0) 50%
    );
  }

  /* Purple blob */
  .g3 {
    top: calc(25% + 200px);
    left: calc(25% - 500px);
    background: radial-gradient(
      circle,
      rgba(var(--color3), 0.8) 0%,
      rgba(var(--color3), 0) 50%
    );
    animation: moveInCircle 90s linear infinite;
  }

  /* Rose blob */
  .g4 {
    top: 25%;
    left: 15%;
    background: radial-gradient(
      circle,
      rgba(var(--color4), 0.8) 0%,
      rgba(var(--color4), 0) 50%
    );
    animation: moveHorizontal 90s ease infinite;
  }

  /* Teal blob */
  .g5 {
    top: calc(50% - var(--circle-size));
    left: calc(50% - var(--circle-size));
    background: radial-gradient(
      circle,
      rgba(var(--color5), 0.8) 0%,
      rgba(var(--color5), 0) 50%
    );
    animation: moveHorizontal 120s ease infinite;
    width: calc(var(--circle-size) * 1.5);
    height: calc(var(--circle-size) * 1.5);
  }

  .interactive {
    position: absolute;
    background: radial-gradient(
      circle at center,
      rgba(var(--color-interactive), 0.5) 0%,
      rgba(var(--color-interactive), 0) 50%
    );
    mix-blend-mode: var(--blending);
    width: 50%;
    height: 50%;
    top: -25%;
    left: -25%;
    opacity: 0.7;
  }

  @keyframes moveInCircle {
    0% {
      transform: rotate(0deg);
    }
    50% {
      transform: rotate(180deg);
    }
    100% {
      transform: rotate(360deg);
    }
  }

  @keyframes moveVertical {
    0% {
      transform: translateY(-50%);
    }
    50% {
      transform: translateY(50%);
    }
    100% {
      transform: translateY(-50%);
    }
  }

  @keyframes moveHorizontal {
    0% {
      transform: translateX(-20%) translateY(-10%);
    }
    50% {
      transform: translateX(40%) translateY(10%);
    }
    100% {
      transform: translateX(-20%) translateY(-10%);
    }
  }
</style>
