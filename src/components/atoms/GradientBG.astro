<script>
  document.addEventListener("astro:page-load", () => {
    const canvas = document.getElementById("gooeyCanvas") as HTMLCanvasElement;
    const ctx = canvas.getContext("2d") as CanvasRenderingContext2D;

    function resizeCanvas() {
      canvas.width = window.innerWidth;
      canvas.height = window.innerHeight;
    }
    resizeCanvas();
    window.addEventListener("resize", resizeCanvas);

    const blobs = [
      { x: 0.15, y: 0.25, size: 0.3, color: "rgba(18, 113, 255, 0.8)" },
      { x: 0.35, y: 0.15, size: 0.3, color: "rgba(221, 74, 255, 0.8)" },
      { x: 0.05, y: 0.25, size: 0.3, color: "rgba(116, 92, 221, 0.8)" },
      { x: 0.15, y: 0.25, size: 0.3, color: "rgba(200, 50, 125, 0.8)" },
      { x: 0.5, y: 0.5, size: 0.45, color: "rgba(0, 169, 225, 0.8)" },
    ];

    let interactive = { x: 0, y: 0, targetX: 0, targetY: 0, size: 0.25 };

    function drawBlobs() {
      ctx.clearRect(0, 0, canvas.width, canvas.height);

      blobs.forEach((blob, i) => {
        const time = Date.now() / 1000;
        const movement =
          i % 2 === 0 ? Math.sin(time / (i + 1)) : Math.cos(time / (i + 1));
        const x = blob.x * canvas.width + movement * canvas.width * 0.05;
        const y = blob.y * canvas.height + movement * canvas.height * 0.05;

        const gradient = ctx.createRadialGradient(
          x,
          y,
          0,
          x,
          y,
          blob.size * canvas.width,
        );
        gradient.addColorStop(0, blob.color);
        gradient.addColorStop(1, "transparent");

        ctx.fillStyle = gradient;
        ctx.beginPath();
        ctx.arc(x, y, blob.size * canvas.width, 0, Math.PI * 2);
        ctx.fill();
      });

      // Interactive bubble
      interactive.x += (interactive.targetX - interactive.x) * 0.1;
      interactive.y += (interactive.targetY - interactive.y) * 0.1;

      const gradient = ctx.createRadialGradient(
        interactive.x,
        interactive.y,
        0,
        interactive.x,
        interactive.y,
        interactive.size * canvas.width,
      );
      gradient.addColorStop(0, "rgba(140, 100, 255, 0.5)");
      gradient.addColorStop(1, "transparent");

      ctx.fillStyle = gradient;
      ctx.beginPath();
      ctx.arc(
        interactive.x,
        interactive.y,
        interactive.size * canvas.width,
        0,
        Math.PI * 2,
      );
      ctx.fill();
    }

    window.addEventListener("mousemove", (event) => {
      interactive.targetX = event.clientX;
      interactive.targetY = event.clientY;
    });

    function animate() {
      drawBlobs();
      requestAnimationFrame(animate);
    }

    animate();
  });
</script>

<div class="gradient-bg sticky left-0 top-0 z-0 opacity-60" transition:persist>
  <canvas id="gooeyCanvas"></canvas>
</div>

<style>
  :root {
    --color1: 18, 113, 255;
    --color2: 221, 74, 255;
    --color3: 116, 92, 221;
    --color4: 200, 50, 125;
    --color5: 0, 169, 225;
    --color-interactive: 140, 100, 255;
    --circle-size: 20%;
    --blending: hard-light;
  }

  .gradient-bg {
    width: 100vw;
    height: 100vh;
    overflow: hidden;
    top: 0;
    left: 0;
    background-color: #20204e;
  }

  canvas {
    display: block;
    width: 100%;
    height: 100%;
    filter: url("/images/gradients.svg#goo") blur(40px);
  }

  .gradients-container {
    display: block;
    width: 100%;
    height: 100%;
    position: relative;
    transition: height 0.5s;
  }

  html[data-is-top="false"] .gradients-container {
    mask-image: linear-gradient(to bottom, black 90%, transparent 100%);
  }

  html[data-is-top="true"] .gradients-container {
    height: 110%;
  }

  .g1,
  .g2,
  .g3,
  .g4,
  .g5 {
    position: absolute;
    width: var(--circle-size);
    height: var(--circle-size);
    background: radial-gradient(
      circle,
      rgba(var(--color1), 0.8) 0%,
      rgba(var(--color1), 0) 50%
    );
    mix-blend-mode: var(--blending);
    animation: moveInCircle 60s infinite;
    transform-origin: center;
  }

  /* Light blue blob */
  .g1 {
    top: 25%;
    left: 15%;
    transform-origin: center;
    animation: moveInCircle 90s ease infinite;
  }

  /* Pink blob */
  .g2 {
    top: 15%;
    left: 35%;
    animation: moveVertical 90s infinite;
    background: radial-gradient(
      circle,
      rgba(var(--color2), 0.8) 0%,
      rgba(var(--color2), 0) 50%
    );
  }

  /* Purple blob */
  .g3 {
    top: calc(25% + 200px);
    left: calc(25% - 500px);
    background: radial-gradient(
      circle,
      rgba(var(--color3), 0.8) 0%,
      rgba(var(--color3), 0) 50%
    );
    animation: moveInCircle 90s linear infinite;
  }

  /* Rose blob */
  .g4 {
    top: 25%;
    left: 15%;
    background: radial-gradient(
      circle,
      rgba(var(--color4), 0.8) 0%,
      rgba(var(--color4), 0) 50%
    );
    animation: moveHorizontal 90s ease infinite;
  }

  /* Teal blob */
  .g5 {
    top: calc(50% - var(--circle-size));
    left: calc(50% - var(--circle-size));
    background: radial-gradient(
      circle,
      rgba(var(--color5), 0.8) 0%,
      rgba(var(--color5), 0) 50%
    );
    animation: moveHorizontal 120s ease infinite;
    width: calc(var(--circle-size) * 1.5);
    height: calc(var(--circle-size) * 1.5);
  }

  .interactive {
    position: absolute;
    background: radial-gradient(
      circle at center,
      rgba(var(--color-interactive), 0.5) 0%,
      rgba(var(--color-interactive), 0) 50%
    );
    mix-blend-mode: var(--blending);
    width: 50%;
    height: 50%;
    top: -25%;
    left: -25%;
    opacity: 0.7;
  }

  @keyframes moveInCircle {
    0% {
      transform: rotate(0deg);
    }
    50% {
      transform: rotate(180deg);
    }
    100% {
      transform: rotate(360deg);
    }
  }

  @keyframes moveVertical {
    0% {
      transform: translateY(-50%);
    }
    50% {
      transform: translateY(50%);
    }
    100% {
      transform: translateY(-50%);
    }
  }

  @keyframes moveHorizontal {
    0% {
      transform: translateX(-20%) translateY(-10%);
    }
    50% {
      transform: translateX(40%) translateY(10%);
    }
    100% {
      transform: translateX(-20%) translateY(-10%);
    }
  }
</style>
