<script>
  document.addEventListener("astro:page-load", function () {
    const bgWrapper = document.querySelector(".bg-wrapper") as HTMLElement;
    let targetRotateX = 0;
    let targetRotateY = 0;
    let currentRotateX = 0;
    let currentRotateY = 0;

    // Track initial state
    const initialTransform =
      "translate3d(0, 0, 10px) rotateX(0deg) rotateY(0deg) scale(1.12)";
    bgWrapper.style.transform = initialTransform;

    // Set up smooth animation with requestAnimationFrame
    function updateAnimation() {
      // Smoothly interpolate current rotation towards target
      currentRotateX += (targetRotateX - currentRotateX) * 0.07;
      currentRotateY += (targetRotateY - currentRotateY) * 0.07;

      // Apply transform with smoothed values
      bgWrapper.style.transform = `translate3d(0, 0, 10px) rotateX(${currentRotateX}deg) rotateY(${currentRotateY}deg) scale(1.12)`;

      // Continue animation loop
      requestAnimationFrame(updateAnimation);
    }

    // Start the animation loop
    updateAnimation();

    // Track mouse movement for desktop
    document.addEventListener("mousemove", function (e) {
      // Calculate mouse position relative to the center of the viewport
      const xPos = e.clientX / window.innerWidth - 0.5;
      const yPos = e.clientY / window.innerHeight - 0.5;

      // Non-linear mapping for more effect in the center region
      // This uses a quadratic function that's stronger in the center
      const adjustedX = xPos * (1 - Math.abs(xPos)) * 2.9;
      const adjustedY = yPos * (1 - Math.abs(yPos)) * 2.9;

      // Update target rotation with the adjusted values
      targetRotateX = adjustedY * -17.5;
      targetRotateY = adjustedX * 17.5;
    });

    // Handle touch events for mobile
    document.addEventListener("touchmove", function (e) {
      if (e.touches.length > 0) {
        const touch = e.touches[0];

        // Calculate touch position relative to the center
        const xPos = touch.clientX / window.innerWidth - 0.5;
        const yPos = touch.clientY / window.innerHeight - 0.5;

        // Apply same non-linear mapping as mouse movement
        const adjustedX = xPos * (1 - Math.abs(xPos)) * 2.9;
        const adjustedY = yPos * (1 - Math.abs(yPos)) * 2.9;

        targetRotateX = adjustedY * -17.5;
        targetRotateY = adjustedX * 17.5;
      }
    });

    // Handle touchend event - no reset behavior
    document.addEventListener("touchend", function () {
      // Perspective stays where it is when touch ends
    });

    // Handle window resize
    window.addEventListener("resize", function () {
      // Nothing needed here, but keeping for extensibility
    });
  });
</script>

<div class="scene">
  <div class="bg-wrapper">
    <div class="gradient-base"></div>
    <div class="blob1"></div>
    <div class="blob2"></div>
    <div class="blob3"></div>
    <div class="blob4"></div>
  </div>
</div>
<div class="noise"></div>

<slot />

<style>
  .container {
    position: relative;
    width: 100%;
    height: 100%;
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    z-index: 10;
    pointer-events: none;
  }

  .scene {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    perspective: 800px; /* Reduced from 1000px for more pronounced effect */
    overflow: hidden;
  }

  .bg-wrapper {
    position: absolute;
    top: -25%;
    left: -25%;
    width: 150%;
    height: 150%;
    will-change: auto;
    transform-style: preserve-3d;
    transition: transform 3.5s cubic-bezier(0.23, 1, 0.32, 1);
  }

  .gradient-base {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: var(--color-dark-purple);
  }

  .blob1,
  .blob2,
  .blob3,
  .blob4 {
    position: absolute;
    border-radius: 50%;
    filter: blur(30px);
  }

  .blob1 {
    width: 50%;
    height: 50%;
    background: radial-gradient(
      circle,
      rgba(0, 169, 225, 0.8) 0%,
      rgba(0, 169, 225, 0) 70%
    );
    top: -20%;
    left: -20%;
    animation: blob-move1 36s ease-in-out infinite;
  }

  .blob2 {
    width: 64%;
    height: 64%;
    background: radial-gradient(
      circle,
      rgba(210, 92, 237, 0.7) 0%,
      rgba(210, 92, 237, 0) 70%
    );
    bottom: -30%;
    right: -20%;
    animation: blob-move2 42.5s ease-in-out infinite;
  }

  .blob3 {
    width: 40%;
    height: 40%;
    background: radial-gradient(
      circle,
      rgba(116, 92, 221, 0.5) 0%,
      rgba(116, 92, 221, 0) 70%
    );
    top: 30%;
    left: 10%;
    animation: blob-move3 33.4s ease-in-out infinite;
  }

  .blob4 {
    width: 65%;
    height: 65%;
    background: radial-gradient(
      circle,
      rgba(54, 47, 120, 0) 0%,
      rgba(54, 47, 120, 0) 70%
    );
    bottom: 20%;
    left: 40%;
    animation: blob-move4 38.6s ease-in-out infinite;
  }

  .noise {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    opacity: 0.1;
    z-index: 5;
    background-image: url("data:image/svg+xml,%3Csvg viewBox='0 0 400 400' xmlns='http://www.w3.org/2000/svg'%3E%3Cfilter id='noise'%3E%3CfeTurbulence type='fractalNoise' baseFrequency='1.50' numOctaves='5' stitchTiles='stitch'/%3E%3C/filter%3E%3Crect width='100%25' height='100%25' filter='url(%23noise)'/%3E%3C/svg%3E");
    pointer-events: none;
    animation: none !important;
    transform: none !important;
    will-change: auto;
  }

  @keyframes blob-move1 {
    0%,
    100% {
      transform: translate(0, 0) scale(1);
    }
    25% {
      transform: translate(40%, 25%) scale(1.1);
    }
    50% {
      transform: translate(25%, 50%) scale(0.9);
    }
    75% {
      transform: translate(10%, 15%) scale(1.05);
    }
    animation-duration: 36s; /* Increased from 20s */
  }

  @keyframes blob-move2 {
    0%,
    100% {
      transform: translate(0, 0) scale(1);
    }
    25% {
      transform: translate(-30%, -20%) scale(0.95);
    }
    50% {
      transform: translate(-45%, -10%) scale(1.1);
    }
    75% {
      transform: translate(-20%, -35%) scale(1);
    }
  }

  @keyframes blob-move3 {
    0%,
    100% {
      transform: translate(0, 0) scale(1);
    }
    33% {
      transform: translate(20%, -25%) scale(1.1);
    }
    66% {
      transform: translate(-15%, -10%) scale(0.9);
    }
  }

  @keyframes blob-move4 {
    0%,
    100% {
      transform: translate(0, 0) scale(1);
    }
    33% {
      transform: translate(-40%, 20%) scale(1.15);
    }
    66% {
      transform: translate(25%, 35%) scale(0.95);
    }
  }
</style>
