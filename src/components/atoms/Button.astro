---
import type { HTMLTag, Polymorphic } from "astro/types";

interface ButtonProps {
  variant?: "primary" | "secondary";
  floating?: boolean;
}

type Props<Tag extends Extract<HTMLTag, "a" | "button"> = "a"> = Polymorphic<{
  as: Tag;
}> &
  ButtonProps;

const {
  as: Tag = "a" as any,
  class: classList,
  variant = "primary",
  floating = false,
  ...attrs
} = Astro.props;

const buttonStyles = {
  primary: "bg-primary-gradient text-light",
  secondary: "font-medium text-light bg-none",
}[variant];

const figureStyles = {
  primary: "bg-secondary-gradient",
  secondary:
    "bg-blurple opacity-15 backdrop-blur-lg group-hover:bg-blurple group-hover:opacity-40",
}[variant];
---

<Tag
  class:list={[
    "group relative w-fit cursor-pointer rounded-lg transition-all duration-100 active:scale-95 disabled:pointer-events-none disabled:opacity-50",
    { "drop-shadow-xl": floating && variant === "primary" },
    Astro.slots.has("icon") && "[&>svg]:size-4",
    buttonStyles,
  ]}
  type={Tag === "button" && !attrs.type ? "button" : null}
  {...attrs}>
  <figure
    class:list={[
      "absolute -inset-[2px] z-10 rounded-lg transition-all duration-100",
      { "group-hover:blur-lg": variant === "primary" },
      { "drop-shadow-xl": floating && variant === "secondary" },
      figureStyles,
    ]}>
  </figure>
  <figure
    class:list={[
      "absolute -inset-[2px] z-10 rounded-lg transition-all duration-100",
      figureStyles,
    ]}>
  </figure>
  <span
    class:list={[
      "nowrap relative z-20 block h-full w-full place-content-center rounded-lg font-medium transition-all duration-100 group-hover:text-light",
      { "group-hover:bg-none": variant === "secondary" },
      { "group-hover:bg-dark": variant === "primary" },
      classList,
    ]}>
    <slot name="icon" />
    <slot />
  </span>
</Tag>
